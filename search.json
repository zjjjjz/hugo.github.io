[{"categories":null,"content":"this is a test on 2025-09-24 Markdown是什么？ 谁创造了它？ 为什么要使用它？ 怎么使用？ 谁在用？ 尝试一下 正文 1. Markdown是什么？ Markdown是一种轻量级标记语言，它以纯文本形式(易读、易写、易更改)编写文档，并最终以HTML格式发布。 Markdown也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。\n2025-09-24 ","description":"","tags":null,"title":"25.0924","uri":"/post/25.0429/"},{"categories":null,"content":" pica - high quality and fast image resize in browser. babelfish - developer friendly i18n with plurals support and easy syntax. You will like those projects! test webp file. 2nd webp. h1 Heading 8-) h2 Heading h3 Heading h4 Heading h5 Heading h6 Heading Horizontal Rules Typographic replacements Enable typographer option to see result.\n(c) (C) (r) (R) (tm) (TM) (p) (P) +-\ntest.. test… test….. test?….. test!….\n!!!!!! ???? ,, – —\n“Smartypants, double quotes” and ‘single quotes’\nEmphasis This is bold text\nThis is bold text\nThis is italic text\nThis is italic text\nStrikethrough\nBlockquotes Blockquotes can also be nested…\n…by using additional greater-than signs right next to each other…\n…or with spaces between arrows.\nLists Unordered\nCreate a list by starting a line with +, -, or * Sub-lists are made by indenting 2 spaces: Marker character change forces new list start: Ac tristique libero volutpat at Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Very easy! Ordered\nLorem ipsum dolor sit amet\nConsectetur adipiscing elit\nInteger molestie lorem at massa\nYou can use sequential numbers…\n…or keep all the numbers as 1.\nStart numbering with offset:\nfoo bar Code Inline code\nIndented code\n// Some comments line 1 of code line 2 of code line 3 of code Block code “fences”\nSample text here... Syntax highlighting\n1 2 3 4 5 var foo = function (bar) { return bar++; }; console.log(foo(5)); Tables Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. Right aligned columns\nOption Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. Links link text\nlink with title\nAutoconverted link https://github.com/nodeca/pica (enable linkify to see)\nImages Like links, Images also have a footnote style syntax\nWith a reference later in the document defining the URL location:\nPlugins The killer feature of markdown-it is very effective support of syntax plugins.\nEmojies Classic markup: :wink: :cry: :laughing: :yum:\nShortcuts (emoticons): :-) :-( 8-) ;)\nsee how to change output with twemoji.\nSubscript / Superscript 19^th^ H2O [](https://github.com/markdown-it/markdown-it-ins) ++Inserted text++\n[](https://github.com/markdown-it/markdown-it-mark) ==Marked text==\nFootnotes Footnote 1 link1.\nFootnote 2 link2.\nInline footnote^[Text of inline footnote] definition.\nDuplicated footnote reference2.\nDefinition lists Term 1 Definition 1 with lazy continuation.\nTerm 2 with inline markup Definition 2\n{ some code, part of Definition 2 } Third paragraph of definition 2.\nCompact style:\nTerm 1 ~ Definition 1\nTerm 2 ~ Definition 2a ~ Definition 2b\nAbbreviations This is HTML abbreviation example.\nIt converts “HTML”, but keep intact partial entries like “xxxHTMLyyy” and so on.\n*[HTML]: Hyper Text Markup Language\nCustom containers ::: warning here be dragons :::\nFootnote can have markup\nand multiple paragraphs. ↩︎\nFootnote text. ↩︎ ↩︎\n","description":"","tags":null,"title":"Markit–test webp","uri":"/post/markit/"},{"categories":null,"content":"Dillinger The Last Markdown Editor, Ever Dillinger is a cloud-enabled, mobile-ready, offline-storage compatible, AngularJS-powered HTML5 Markdown editor.\nType some Markdown on the left See HTML in the right ✨Magic ✨ Features Import a HTML file and watch it magically convert to Markdown Drag and drop images (requires your Dropbox account be linked) Import and save files from GitHub, Dropbox, Google Drive and One Drive Drag and drop markdown and HTML files into Dillinger Export documents as Markdown, HTML and PDF Markdown is a lightweight markup language based on the formatting conventions that people naturally use in email. As John Gruber writes on the Markdown site\nThe overriding design goal for Markdown’s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions.\nThis text you see here is *actually- written in Markdown! To get a feel for Markdown’s syntax, type some text into the left window and watch the results in the right.\nTech Dillinger uses a number of open source projects to work properly:\nAngularJS - HTML enhanced for web apps! Ace Editor - awesome web-based text editor markdown-it - Markdown parser done right. Fast and easy to extend. Twitter Bootstrap - great UI boilerplate for modern web apps node.js - evented I/O for the backend Express - fast node.js network app framework @tjholowaychuk Gulp - the streaming build system Breakdance - HTML to Markdown converter jQuery - duh And of course Dillinger itself is open source with a public repository on GitHub.\nInstallation Dillinger requires Node.js v10+ to run.\nInstall the dependencies and devDependencies and start the server.\n1 2 3 cd dillinger npm i node app For production environments…\n1 2 npm install --production NODE_ENV=production node app Plugins Dillinger is currently extended with the following plugins. Instructions on how to use them in your own application are linked below.\nPlugin README Dropbox plugins/dropbox/README.md GitHub plugins/github/README.md Google Drive plugins/googledrive/README.md OneDrive plugins/onedrive/README.md Medium plugins/medium/README.md Google Analytics plugins/googleanalytics/README.md Development Want to contribute? Great!\nDillinger uses Gulp + Webpack for fast developing. Make a change in your file and instantaneously see your updates!\nOpen your favorite Terminal and run these commands.\nFirst Tab:\n1 node app Second Tab:\n1 gulp watch (optional) Third:\n1 karma test Building for source For production release:\n1 gulp build --prod Generating pre-built zip archives for distribution:\n1 gulp build dist --prod Docker Dillinger is very easy to install and deploy in a Docker container.\nBy default, the Docker will expose port 8080, so change this within the Dockerfile if necessary. When ready, simply use the Dockerfile to build the image.\n1 2 cd dillinger docker build -t \u003cyouruser\u003e/dillinger:${package.json.version} . This will create the dillinger image and pull in the necessary dependencies. Be sure to swap out ${package.json.version} with the actual version of Dillinger.\nOnce done, run the Docker image and map the port to whatever you wish on your host. In this example, we simply map port 8000 of the host to port 8080 of the Docker (or whatever port was exposed in the Dockerfile):\n1 docker run -d -p 8000:8080 --restart=always --cap-add=SYS_ADMIN --name=dillinger \u003cyouruser\u003e/dillinger:${package.json.version} Note: --capt-add=SYS-ADMIN is required for PDF rendering.\nVerify the deployment by navigating to your server address in your preferred browser.\n1 127.0.0.1:8000 License MIT\nFree Software, Hell Yeah!\n","description":"","tags":null,"title":"Dillinger","uri":"/post/dillinger/"},{"categories":null,"content":"Title Header (H1 header) Introduction (H3 header) This is some placeholder text tofasdf show examples of Markdown formatting. We have a full article template you can use when writing a DigitalOcean article. Please refer to our style and formatting guidelines for more detailed explanations: https://do.co/style\nPrerequisites (H2 header) Before you begin this guide you’ll need the following:\nFamiliarity with Markdown Step 1 — Basic Markdown This is italics, this is bold, this is underline, and this is strikethrough.\nThis is a list item. This list is unordered. This is a list item. This list is ordered. This is a quote.\nThis is a quote inside a quote.\nThis is a list in a quote. Another item in the quote list. Here’s how to include an image with alt text and a title:\nWe also support some extra syntax for setting the width, height and alignment of images. You can provide pixels (200/200px), or a percentage (50%), for the width/height. The alignment can be either left or right, with images being centered by default. These settings are all optional.\n{ width=200 height=131 align=left }\nUse horizontal rules to break up long sections:\nRich transformations are also applied:\nOn ellipsis: … On quote pairs: “sammy”, ’test' On dangling single quotes: it’s On en/em dashes: a – b, a — b Tables are also supported and will overflow cleanly if needed col 1 col 2 col 3 col 4 col 5 col 6 col 7 col 8 col 9 col 10 col 1 col 2 col 3 col 4 col 5 col 6 col 7 col 8 col 9 col 10 col 1 col 2 col 3 col 4 col 5 col 6 col 7 col 8 col 9 col 10 col 1 col 2 col 3 col 4 col 5 col 6 col 7 col 8 col 9 col 10 col 1 col 2 col 3 col 4 col 5 col 6 col 7 col 8 col 9 col 10 Step 2 — Code This is inline code. This is a \u003c^\u003evariable\u003c^\u003e. This is an in-line code \u003c^\u003evariable\u003c^\u003e.\nHere’s a configuration file with a label:\n1 2 3 4 5 [label /etc/nginx/sites-available/default] server { listen 80 \u003c^\u003edefault_server\u003c^\u003e; . . . } Examples can have line numbers, and every code block has a ‘Copy’ button to copy just the code:\nconst test = 'hello'; const other = 'world'; console.log(test, other); Here’s output from a command with a secondary label:\n[secondary_label Output] Could not connect to Redis at 127.0.0.1:6379: Connection refused This is a non-root user command example:\nsudo apt-get update sudo apt-get install python3 This is a root command example:\nadduser sammy shutdown This is a custom prefix command example:\nFLUSH PRIVILEGES; SELECT * FROM articles; A custom prefix can contain a space by using \\s:\nFLUSH PRIVILEGES; SELECT * FROM articles; Indicate where commands are being run with environments:\n[environment local] ssh root@server_ip [environment second] echo \"Secondary server\" [environment third] echo \"Tertiary server\" [environment fourth] echo \"Quaternary server\" [environment fifth] echo \"Quinary server\" And all of these can be combined together, with a language for syntax highlighting as well as a line prefix (line numbers, command, custom prefix, etc.), and even an environment and label:\n[environment second] [label index.html] \u003chtml\u003e \u003cbody\u003e \u003chead\u003e \u003ctitle\u003e\u003c^\u003eMy Title\u003c^\u003e\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e . . . \u003c/body\u003e \u003c/html\u003e Step 3 — Callouts Here is a note, a warning, some info and a draft note:\n\u003c$\u003e[note] Note: Use this for notes on a publication. \u003c$\u003e\n\u003c$\u003e[warning] Warning: Use this to warn users. \u003c$\u003e\n\u003c$\u003e[info] Info: Use this for product information. \u003c$\u003e\n\u003c$\u003e[draft] Draft: Use this for notes in a draft publication. \u003c$\u003e\nA callout can also be given a label, which supports inline markdown as well:\n\u003c$\u003e[note] [label Labels support inline markdown] Note: Use this for notes on a publication. \u003c$\u003e\nYou can also mention users by username:\n@MattIPv4\nStep 4 — Layout Columns allow you to customise the layout of your Markdown:\n[column Content inside a column is regular Markdown block content.\nAny block or inline syntax can be used, including quotes. ]\n[column Two or more columns adjacent to each other are needed to create a column layout.\nOn desktop the columns will be evenly distributed in a single row, on tablets they will wrap naturally, and on mobile they will be in a single stack. ]\n[details Content can be hidden using details. Inside the details block you can use any block or inline syntax.\nYou could hide the solution to a problem:\n1 2 // Write a message to console console.log('Hello, world!'); ]\n[details open You can also have the details block open by default. Pass open as the first argument to the summary section to do this.\nYou can also pass closed, though this is the same as not passing anything before the summary. ]\nStep 5 — Embeds YouTube Embedding a YouTube video (id, height, width):\n[youtube iom_nhYQIYk 225 400]\nBoth the width and height are optional, with the defaults being 480 and 270 respectively.\nThe width/height set are treated as maximums – the video will scale down to fit the available space, maintaining the aspect ratio.\nWistia Embedding a Wistia video (id, height, width):\n[wistia 7ld71zbvi6 225 400]\nAs with the YouTube embed, both the width and height are optional and have the same defaults.\nThe same behaviour applies to the width/height set, with responsive scaling.\nVimeo Embedding a Vimeo video (url, height, width):\n[vimeo https://player.vimeo.com/video/329272793 225 400]\nAs with the YouTube embed, both the width and height are optional and have the same defaults.\nThe same behaviour applies to the width/height set, with responsive scaling.\nDNS Embedding DNS record lookups (hostname, record types…):\n[dns digitalocean.com A AAAA]\nGlob Demonstrating how glob matching works (pattern, tests…):\n[glob **/*.js a/b.js c/d.js e.jsx f.md]\nGlob embeds can also be written as multiple lines if needed:\n[glob **/*.js a/b.js c/d.js e.jsx f.md]\nCodePen To provide code examples, you could embed a CodePen with a username and pen ID:\n[codepen MattCowley vwPzeX]\nCodePen embeds can be customized with many flags after the username and ID:\nPass any integer value to set a custom height for the embed (e.g. [codepen MattCowley vwPzeX 512]) Pass dark to switch the embed to using dark mode (e.g. [codepen MattCowley vwPzeX dark]) Pass lazy to enable lazy loading (click to run) for the embed (e.g. [codepen MattCowley vwPzeX lazy]) Pass one of html, css, or js to change the default tab that is shown (e.g. [codepen MattCowley vwPzeX css]) Pass result to show the result of the pen. This is the default tab, but can be combined with other tabs as well (e.g. [codepen MattCowley vwPzeX html result]) Pass editable to enable the user to edit the embed (e.g. [codepen chriscoyier Yxzjdz editable])\n(Note: The embedded pen must be from a user with CodePen Pro for this to work) These flags can be combined in any order to create a custom CodePen embed. For example, [codepen MattCowley vwPzeX dark css 384] would create a dark mode embed that shows the CSS tab by default, with a height of 384px.\nGlitch Alternatively, you may want to embed a code example from Glitch with a project slug:\n[glitch hello-digitalocean]\nSimilar to CodePen embeds, a set of optional flags can be passed as the slug to customize the embed:\nPass any integer value to set a custom height for the embed (e.g. [glitch hello-digitalocean 512]) Pass code to show the project code by default in the embed (e.g. [glitch hello-digitalocean code]) Pass notree to hide the file tree by default when showing the project code (e.g. [glitch hello-digitalocean code notree]) Pass path=... to set a default file to show when showing the project code (e.g. [glitch hello-digitalocean code path=src/app.jsx]) Pass highlights=... to set lines to highlight when showing the project code (e.g. [glitch hello-digitalocean code path=src/app.jsx highlights=15,25]) Pass noattr to remove the author attribution from the embed (e.g. [glitch hello-digitalocean noattr]) Can I Use If you’re writing web-related content, you may want to embed a Can I Use table for a feature:\n[caniuse css-grid]\nSome optional flags can also be set for this embed:\nPass past=... to set how many previous browser versions are listed (0-5) (e.g. [caniuse css-grid past=5]) Pass future=... to set how many future browser versions are listed (0-3) (e.g. [caniuse css-grid future=3]) Pass accessible to switch to the accessible color scheme by default (e.g. [caniuse css-grid accessible]) Asciinema Embedding a terminal recording from Asciinema (id, cols, rows):\n[asciinema 239367 50 20]\nTwitter You can also embed a tweet from Twitter by passing the URL for the tweet:\n[twitter https://twitter.com/MattIPv4/status/1576415168426573825]\nLike a few other embeds, you can also pass optional flags to customize the embed:\nPass any integer value (between 250 and 550) to set a custom width for the embed (e.g. [twitter https://twitter.com/MattIPv4/status/1576415168426573825 400]) Pass light or dark to switch the theme of the embed (e.g. [twitter https://twitter.com/MattIPv4/status/1576415168426573825 dark]) Pass left, center, or right to align the embed (e.g. [twitter https://twitter.com/MattIPv4/status/1576415168426573825 left]) Instagram You can also embed a post from Instagram by passing the URL for the post:\n[instagram https://www.instagram.com/p/CkQuv3_LRgS]\nLike a few other embeds, you can also pass optional flags to customize the embed:\nPass any integer value (between 326 and 550) to set a custom width for the embed (e.g. [instagram https://www.instagram.com/p/CkQuv3_LRgS 400]) Add left, center, or right to set the alignment of the embed (default is left). Pass caption to include caption under the post (e.g. [instagram https://www.instagram.com/p/CkQuv3_LRgS caption]) Slideshow You can also embed Slideshow (url1, url2, …urls, height, width):\n[slideshow https://assets.digitalocean.com/banners/python.png https://assets.digitalocean.com/banners/javascript.png https://assets.digitalocean.com/banners/nodejs.png]\nBoth the width and height are optional, with the defaults being 480 and 270 respectively.\nImage compare Compare two images side by side (url1, url2, height, width):\n[compare https://assets.digitalocean.com/banners/python.png https://assets.digitalocean.com/banners/javascript.png]\nBoth the width and height are optional, with the defaults being 480 and 270 respectively.\nStep 6 — Tutorials Certain features of our Markdown engine are designed specifically for our tutorial content-types. These may not be enabled in all contexts in the DigitalOcean community, but are enabled by default in the do-markdownit plugin.\n[rsvp_button 1234 “Marketo RSVP buttons use the rsvp_button flag”]\n[terminal ubuntu:focal Terminal buttons are behind the terminal flag]\nConclusion Please refer to our writing guidelines for more detailed explanations on our style and formatting.\n","description":"","tags":null,"title":"DigitOcean Markdown sample","uri":"/post/sample.do/"},{"categories":null,"content":"主要内容 Markdown是什么？ 谁创造了它？ 为什么要使用它？ 怎么使用？ 谁在用？ 尝试一下 正文 1. Markdown是什么？ Markdown是一种轻量级标记语言，它以纯文本形式(易读、易写、易更改)编写文档，并最终以HTML格式发布。 Markdown也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。\n2. 谁创造了它？ 它由Aaron Swartz和John Gruber共同设计，Aaron Swartz就是那位于去年（2013年1月11日）自杀,有着开挂一般人生经历的程序员。维基百科对他的介绍是：软件工程师、作家、政治组织者、互联网活动家、维基百科人。\n他有着足以让你跪拜的人生经历：\n14岁参与RSS 1.0规格标准的制订。 2004年入读斯坦福，之后退学。 2005年创建Infogami，之后与Reddit合并成为其合伙人。 2010年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。 2011年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。 2013年1月自杀身亡。 天才都有早逝的归途。\n3. 为什么要使用它？ 它是易读（看起来舒服）、易写（语法简单）、易更改纯文本。处处体现着极简主义的影子。 兼容HTML，可以转换为HTML格式发布。 跨平台使用。 越来越多的网站支持Markdown。 更方便清晰地组织你的电子邮件。（Markdown-here, Airmail） 摆脱Word（我不是认真的）。 4. 怎么使用？ 如果不算扩展，Markdown的语法绝对简单到让你爱不释手。\nMarkdown语法主要分为如下几大部分： 标题，段落，区块引用，代码区块，强调，列表，分割线，链接，图片，反斜杠 \\，符号’`’。\n4.1 标题 两种形式：\n1）使用=和-标记一级和二级标题。\n一级标题\n=========\n二级标题 ---------\n效果：\n一级标题 二级标题 2）使用#，可表示1-6级标题。\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n效果：\n一级标题 二级标题 三级标题 四级标题 五级标题 六级标题 4.2 段落 段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用两个以上空格加上回车（引用中换行省略回车）。\n4.3 区块引用 在段落的每行或者只在第一行使用符号\u003e,还可使用多个嵌套引用，如：\n\u003e 区块引用\n\u003e\u003e 嵌套引用\n效果：\n区块引用\n嵌套引用\n4.4 代码区块 代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如 普通段落：\nvoid main() { printf(“Hello, Markdown.”); }\n代码区块：\nvoid main() { printf(\"Hello, Markdown.\"); } 注意:需要和普通段落之间存在空行。\n4.5 强调 在强调内容两侧分别加上*或者_，如：\n*斜体*，_斜体_ **粗体**，__粗体__\n效果：\n斜体，斜体 粗体，粗体\n4.6 列表 使用·、+、或-标记无序列表，如：\n-（+*） 第一项 -（+*） 第二项 - （+*）第三项\n注意：标记后面最少有一个_空格_或_制表符_。若不在引用区块中，必须和前方段落之间存在空行。\n效果：\n第一项 第二项 第三项 有序列表的标记方式是将上述的符号换成数字,并辅以.，如：\n1 . 第一项\n2 . 第二项 3 . 第三项\n效果：\n第一项 第二项 第三项 4.7 分割线 分割线最常使用就是三个或以上*，还可以使用-和_。\n4.8 链接 链接可以由两种形式生成：行内式和参考式。 行内式：\n[younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。\n效果：\nyounghz的Markdown库。\n参考式：\n[younghz的Markdown库1][1] [younghz的Markdown库2][2] [1]:https:://github.com/younghz/Markdown “Markdown” [2]:https:://github.com/younghz/Markdown “Markdown”\n效果：\nyounghz的Markdown库1 younghz的Markdown库2\n注意：上述的[1]:https:://github.com/younghz/Markdown \"Markdown\"不出现在区块中。\n4.9 图片 添加图片的形式和链接相似，只需在链接的基础上前方加一个！。\n4.10 反斜杠\\ 相当于反转义作用。使符号成为普通符号。\n4.11 符号’`' 起到标记作用。如：\n`ctrl+a`\n效果：\nctrl+a\n5. 谁在用？ Markdown的使用者：\nGitHub 简书 Stack Overflow Apollo Moodle Reddit 等等 6. 尝试一下 Chrome下的插件诸如stackedit与markdown-here等非常方便，也不用担心平台受限。 在线的dillinger.io评价也不错 Windowns下的MarkdownPad也用过，不过免费版的体验不是很好。 Mac下的Mou是国人贡献的，口碑很好。 Linux下的ReText不错。 当然，最终境界永远都是笔下是语法，心中格式化 :)。\n注意：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。 虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber] (http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/ )。\n以上基本是所有traditonal markdown的语法。\n其它： 列表的使用(非traditonal markdown)：\n用|表示表格纵向边界，表头和表内容用-隔开，并可用:进行对齐设置，两边都有:则表示居中，若不加:则默认左对齐。\n代码库 链接 MarkDown https://github.com/younghz/Markdown MarkDownCopy https://github.com/younghz/Markdown 关于其它扩展语法可参见具体工具的使用说明。\n","description":"","tags":null,"title":"Markdown sample2","uri":"/post/markdown_sample/"},{"categories":null,"content":"首先声名，这并不是一份完整的Markdown的语法介绍，需要看完整的介绍请点击Markdown Syntax Documentation。\n本文的Markdown源代码可以至后台编辑文章进行查看，文章结尾也将以源代码的形式贴出\n段落 一个段落是由一个或多个连续的行构成，段落间靠一个或以上视觉上的空行划分。一般的段落不应该用空格或制表符缩进\n这是一个段落。它有两个句子。 这是另一个段落。它也有 两个句子。 换行 在文本中输入的换行会从最终生成的结果中删除，浏览器会根据可用空间自动换行。如果想强迫换行，可以在行尾插入至少两个空格。\n强调 *强调* 或者 _强调_ (示例：斜体) **加重强调** 或者 __加重强调__ (示例：粗体) ***特别强调*** 或者 ___特别强调___ (示例：粗斜体) 代码 要在Markdown中插入代码，你有两种选择。 一种是把代码用反引号(`)(键盘上Esc键下面的键)包起，例如：\n夹杂着`一些代码`的文字内容, 又或者以制表符或至少四个空格缩进的行，例如：\n第一行代码 第二行代码 第三行代码 后面一种用法会让Markdown保留所有的空白字符——而与之相反，一般情况下，Markdown会删除所有换行和空格，打乱原有的缩进和排版。\n列表 * 无序(没有编号的)列表中的一项 * 一个子项，要以一个制表符或者4个空格缩进 * 无序列表中的另一个项 1. 有序(排好序，有编号的)列表中的一项 2. 有序列表中的另一个项 标题 可以在标题内容前输入特定数量的井号(’#’)来实现对应级别的HTML样式的标题(HTML提供六级标题)。例如：\n# 一级标题 #### 四级标题 一级和二级标题还有一种写法：\n一级标题 =================== 二级标题 -------------------- 引用 引用只需要在被引用的内容段落开头加上右尖括号(’\u003e’)即可。你可以选择只在开头加一个。也可以在每行前面都加一个，效果是一样的。\n\u003e 这一整段的内容都会作为一个HTML的引用元素。引用元素是会自动优化排版的（reflowable，可回流）。你可以任意地将引用的内容包含进来，然后所有这些都会被解析成为单独一个引用元素。 上述内容会转换成以下HTML内容：\n\u003cblockquote\u003e\u003cp\u003e这一整段的内容都会作为一个HTML的引用元素。引用元素是会自动优化排版的（reflowable，可回流）。你可以任意地将引用的内容包含进来，然后所有这些都会被解析成为单独一个引用元素。\u003c/p\u003e\u003c/blockquote\u003e 引用可以嵌套。如果要在一个引用里插入一个引用，可以用两个(’\u003e’)开头。依此类推，根据嵌套层次加相应数量的符号。\n\u003e 这是一个引用。这是第一行 这是第二行。 \u003e\u003e 这是一个嵌套的引用。这是第一行。 这是第二行 \u003e \u003e 外层引用的第三行。前面需要一个视觉上的空行表示内层嵌套的结束，空行前面的('\u003e')可以有可以没有。 链接 链接可以在行内插入：\n[链接文字](链接地址) 例子： [Markdown](http://zh.wikipedia.com/wiki/Markdown) 另一种选择是，链接地址可以放在段落后面的脚注，前面放上链接引用标签区分。举例说，先在内容行内插入以下内容：\n[链接文字][链接引用标签] 然后在段落的后面（或者文档的结尾）放上以下内容，就可以生成一个链接：\n[链接引用标签]: 链接地址 \"链接标题\" 水平分割线 要生成水平分割线，可以在单独一行里输入3个或以上的短横线、星号或者下划线实现。短横线和星号之间可以输入任意空格。以下每一行都产生一条水平分割线。\n* * * *** ***** - - - --------------------------------------- 本文源代码作为示例\n[gist id=4200618]\n","description":"","tags":null,"title":"Markdown Sample","uri":"/post/sample/"},{"categories":null,"content":"6th Post this is the test line. 1 2 3 4\n","description":"","tags":null,"title":"6th","uri":"/post/6th/"},{"categories":null,"content":" Rclone browser Simple cross platfrom GUI for rclone command line tool.\nSupports macOS, GNU/Linux, BSD family and Windows.\nTable of contents Features Sample screenshots How to get it Why AppImage only for Linux Build instructions Linux FreeBSD OpenBSD NetBSD macOS Windows Portable vs standard mode History Code signing certificates donations Features Allows to browse and modify any rclone remote, including encrypted ones Uses same configuration file as rclone, no extra configuration required Supports custom location and encryption for rclone.conf configuration file Simultaneously navigate multiple repositories in separate tabs Lists files hierarchically with file name, size and modify date All rclone commands are executed asynchronously, no freezing GUI File hierarchy is lazily cached in memory, for faster traversal of folders Allows to upload, download, create new folders, rename or delete files and folders Allows to calculate size of folder, export list of files and copy rclone command to clipboard Can process multiple upload or download jobs in background Drag \u0026 drop support for dragging files from local file explorer for uploading Streaming media files for playback in player like vlc or similar Mount and unmount folders on macOS, GNU/Linux and Windows (for Windows requires winfsp and for mac fuse for macOS) Optionally minimizes to tray, with notifications when upload/download finishes Supports portable mode (create .ini file next to executable with same name), rclone and rclone.conf path now can be relative to executable Supports drive-shared-with-me (Google Drive specific) For remotes supporting public link sharing has an option (right-click menu) to fetch it Supports tasks. Created jobs can be saved and run or edited later. Configurable dark mode for all systems Sample screenshots macOS\nLinux\n  Windows\n  How to get it Get binaries for Windows, macOS and Linux on releases’ page.\nWindows installers (64-bit and 32-bit) are compatible with all x86 based Windows OS starting with Windows 7. If for whatever reason somebody would prefer not to run installer all files can be extracted using innoextract.\nMac version is compiled to run on all versions of macOS starting with 10.9.\nSituation with Linux is a bit fuzzier… Linux binary (AppImage) for armhf architecture runs on any Raspberry Pi hardware using Raspbian based on Stretch or Buster.\nLinux binaries (AppImage) for x86_64 and i386 architectures should run on systems using distributions released in the last few years. x86_64 one is built on CentOS 7 (released in 2014) and i386 on Ubuntu 16.04 LTS (released in 2016).\nThe whole idea with AppImage is to build it on the oldest still supported LTS distro – and it should work on all newer OS releases. AppImage contains an aplication and all the files the app needs to run. In other words, each AppImage has no dependencies other than what is included in the base operating system.\nIn practical terms it means that for example for Ubuntu Rclone Browser AppImage works on all versions starting with 16.04 LTS and for Debian starting with Stretch. With other distributions YMMV but I test major ones like Suse or Fedora. This is Linux. 10000 different distributions… with changes and customizations often only their authors are aware of. I would be happy to hear what distribution it does not work for.\nTo make life easier when using AppImages on Linux, you can use AppImageLauncher which monitors your system for downloaded AppImages and provides several useful benefits including:\nAppImage desktop integration - AppImageLauncher allows you to integrate AppImages you download into your application menu or launcher to make it easier for you to launch them. It also takes care of moving them into a central location, where you can find them later if you need access to them again.\nUpdate management - AppImageLauncher provides a simple to use update mechanism. After desktop integration, the context menu of the AppImage’s entry in the application launcher will have an entry for updating that launches a little helper tool that uses AppImageUpdate internally. Just click the entry and have the tool search and apply updates.\nEasy removal of AppImages from system - Removing integrated AppImages is pretty simple, too. Similar to updating AppImages, you will find an entry in the context menu in the application launcher that triggers a removal tool. You will be asked to confirm the removal. If you choose to do so, the desktop integration is undone, and the file is removed from your system.\nFor all released binaries file with hashes signed with my PGP key is provided. It allows to verify that provided binaries were created by myself (authenticity) and are unchanged (integrity). If you would like to have properly signed releases with code signing certificates please see note at the end of this section.\nArchLinux users can install latest release from AUR repository: rclone-browser.\nFedora package is now available from Fedora packages - simply run sudo dnf install rclone-browser\nFreeBSD has its version available from freshports website.\nNote: For Windows and macOS it would be much nicer (to avoid pop ups about unknown software origin) to properly sign released packages with code signing certificates however it does not come free even for open source software. I looked at it and it seems that to get keys for both systems for the next three years would cost about $500 (3x$99 for Apple developer account and $200 for cheapest Comodo code signing certificate. I am not prepared to budget it as I do this only as a hobby and I am entirely happy with this software as it is. If Rclone Browser users think that properly signed software would be beneficial for them they can chip in some cash for it. If I raise required amount I will get keys. If not I will give money to some charity.\nWhy AppImage only for Linux Starting with version 1.7.0 Linux binaries are only available in AppImage format. Some explanation on this…\nBinaries for Linux desktop applications is a major f*ing pain in the ass… as Linus Torvalds said - DebConf 14_ QA at 05:40:\nI’m talking about actual application writers that want to make a package of their application for Linux. And I’ve seen this firsthand with the other project I’ve been involved with, which is my divelog application. We make binaries for Windows and OS X.\nHe is talking about Subsurface. His small side project.\nWe basically don’t make binaries for Linux. Why? Because binaries for Linux desktop applications is a major f*ing pain in the ass. Right. You don’t make binaries for Linux. You make binaries for Fedora 19, Fedora 20, maybe there’s even like RHEL 5 from ten years ago, you make binaries for debian stable. Or actually you don’t make binaries for debian stable because debian stable has libraries that are so old that anything that was built in the last century doesn’t work. But you might make binaries for debian… whatever the codename is for unstable. And even that is a major pain because (…) debian has those rules that you are supposed to use shared libraries. Right.\nAnd if you don’t use shared libraries, getting your package in, like, is just painful. But using shared libraries is not an option when the libraries are experimental and the libraries are used by two people and one of them is crazy, so every other day some ABI breaks. So you actually want to just compile one binary and have it work. Preferably forever. And preferably across all Linux distributions. And I actually think distributions have done a horribly, horribly bad job.\nOne of the things that I do on the kernel - and I have to fight this every single release and I think it’s sad - we have one rule in the kernel, one rule: we don’t break userspace. (…) People break userspace, I get really, really angry. (…) And then all the distributions come in and they screw it all up. Because they break binary compatibility left and right. They update glibc and everything breaks. (…) So that’s my rant. And that’s what I really fundamentally think needs to change for Linux to work on the desktop because you can’t have applications writers to do fifteen billion different versions.\nAnd I totally agree with above. I want to provide binary which works across as many Linux distributions as possible and I dont have time to fight with all mess with different dependencies etc. There are other similar ditribution formats e.g. flatpak but I had to choose one and I decided that AppImage is my best choice. I am not saying that AppImage is the best one but it nicely fits my objectives. You can see comparison of different solutions here.\nIf for whatever reason you are not happy or your system is not covered with provided binaries you can easily build Rclone Browser for yourself. Especially on Unix-like systems it is very easy. Please see below step by step instructions for major operating systems. I have tested all of them and you can have your own Linux distribution Rclone Browser running in no time - it takes 8 min on Raspberry Pi 3B+, on modern desktop it can be less than a minute.\nBuild instructions Linux Install dependencies for your particular distribution: Debian/Ubuntu and derivatives: sudo apt update \u0026\u0026 sudo apt -y install git g++ cmake make qtdeclarative5-dev Suse/OpenSuse: sudo zypper ref \u0026\u0026 sudo zypper --non-interactive install git cmake make gcc-c++ libQt5Core-devel libQt5Widgets-devel libQt5Network-devel RHEL/CentOS: sudo yum -y install git gcc-c++ cmake make qt5-qtdeclarative Fedora: sudo dnf -y install git g++ cmake make qt5-qtdeclarative-devel Arch/Manjaro: sudo pacman -Sy --noconfirm --needed git gcc cmake make qt5-declarative Clone source code from this repo git clone https://github.com/kapitainsky/RcloneBrowser.git Go to source folder cd RcloneBrowser Create new build folder - mkdir build \u0026\u0026 cd build Run cmake .. from build folder to create makefile Run make from build folder to create binary Install sudo make install FreeBSD Install dependencies sudo pkg install git cmake qt5-buildtools qt5-declarative qt5-qmake Clone source code from this repo git clone https://github.com/kapitainsky/RcloneBrowser.git Go to source folder cd RcloneBrowser Create new build folder - mkdir build \u0026\u0026 cd build Run cmake .. from build folder to create makefile Run make from build folder to create binary Install sudo make install Note: For rclone remotes mount to work please see this forum thread. For me it was enough to run sudo sysctl vfs.usermount=1\nOpenBSD Install dependencies sudo pkg_add git cmake qt5 Clone source code from this repo git clone https://github.com/kapitainsky/RcloneBrowser.git Go to source folder cd RcloneBrowser Create new build folder - mkdir build \u0026\u0026 cd build Run cmake .. -DCMAKE_PREFIX_PATH:PATH=/usr/local/lib/qt5/cmake from build folder to create makefile Run make from build folder to create binary Install sudo make install Note: rclone for openBSD does not support mount hence this feature is disabled in Rclone Browser. cgofuse guys did not manage to implement it: #18\nNetBSD Install dependencies sudo pkgin install git cmake qt5-qtdeclarative Clone source code from this repo git clone https://github.com/kapitainsky/RcloneBrowser.git Go to source folder cd RcloneBrowser Create new build folder - mkdir build \u0026\u0026 cd build Run cmake .. -DCMAKE_PREFIX_PATH:PATH=/usr/pkg/qt5 from build folder to create makefile Run make from build folder to create binary Install sudo make install Note: rclone for NetBSD does not support mount hence this feature is disabled in Rclone Browser. cgofuse guys did not manage to implement it: #18\nmacOS If you don’t have Homebrew yet install it /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" You might be asked to install xcode command line tools - do it. This is actuall macOS SDK, headers, and build tools. You don’t need full xcode IDE. Install dependencies brew install git cmake rclone qt5 Clone source code from this repo git clone https://github.com/kapitainsky/RcloneBrowser.git Go to source folder cd RcloneBrowser Create new build folder - mkdir build \u0026\u0026 cd build Run cmake .. -DCMAKE_PREFIX_PATH:PATH=/usr/local/opt/qt from build folder to create makefile Run make from build folder to create binary Go to yet another newly created build folder cd build. Your binary should be here Package your binary with Qt libraries to create self contained application /usr/local/opt/qt/bin/macdeployqt rclone-browser.app -executable=\"rclone-browser.app/Contents/MacOS/rclone-browser\" -qmldir=../src/. Without this step binary won’t work without Qt installed Windows Get Visual Studio 2019 - you need “Desktop development with C++” module only Install CMake Install latest Qt v5 (64-bit) from Qt website. You only need “Qt 5.13.2 Prebuilt Components for MSVC 2017 64-bit” (MSVC 2017 64-bit). Later steps assume you install it in c:\\Qt Get rclone-browser source code. You either need to install git and clone it or download zip file from releases Go to source folder cd RcloneBrowser From cmd create new build folder - mkdir build and then cd build run cmake -G \"Visual Studio 16 2019\" -A x64 -DCMAKE_CONFIGURATION_TYPES=\"Release\" -DCMAKE_PREFIX_PATH=c:\\Qt\\5.13.2\\msvc2017_64 .. \u0026\u0026 cmake --build . --config Release run c:\\Qt\\5.13.2\\msvc2017_64\\bin\\windeployqt.exe --no-translations --no-angle --no-compiler-runtime --no-svg \".\\build\\Release\\RcloneBrowser.exe\" build\\Release folder contains now RcloneBrowser.exe binary and all other files required to run it If your system does not have required MSVC runtime you can install one from Microsoft website. Portable vs standard mode In standard operations mode all configurations files are stored in the following locations:\nmacOS:\npreferences: ~/Library/Preferences/com.rclone-browser.rclone-browser.plist tasks file: ~/Library/Application Support/rclone-browser/rclone-browser/tasks.bin lock file: in $TMPDIR assigned by OS Linux/BSD:\npreferences: ~/.config/rclone-browser/rclone-browser.conf tasks file: ~/.local/share/rclone-browser/rclone-browser/tasks.bin lock file: in $TMPDIR or /tmp if $TMPDIR is not defined Windows:\npreferences: in registry Computer\\HKEY_CURRENT_USER\\Software\\rclone-browser\\rclone-browser tasks file: %HOMEPATH%\\AppData\\Local\\rclone-browser\\rclone-browser\\tasks.bin lock file: %HOMEPATH%\\AppData\\Local\\Temp\\ Starting with version 1.7.0 of Rclone Browser portable mode is supported on all operating systems. To enable it you have to create .ini file (for Windows and macOS) next to executable with same name - e.g. if application name is RcloneBrowser.exe or RcloneBrowser.app create RcloneBrowser.ini. For Linux create a directory (not a file) with the same name as the AppImage plus the “.config” extension in the same directory as the AppImage file - e.g. if application name is rclone-browser.AppImage create folder rclone-browser.AppImage.config next to it. This is solution supported by AppImage specification.\nIn portable mode all configuration files will be stored in the same folder as application (in .config folder on Linux) and rclone and rclone.conf path can be relative to executable - so if in preferences in rclone location you put rclone.exe browser with look for it in folder where application resides. It means that you can put all required stuff including rclone binary itself and its config on e.g. memory stick and everything will be stored there.\nHistory I have been using rclone-browser for long time and being annoyed by small not working bits and pieces I decided for DYI approach and this is how this repo was created. Original mmozeiko’s repository was abandoned and in the meantime rclone changed few things breaking rclone-browser functionality.\nI looked around but could not find anything fully working. Some github users made progress in fixing and adding stuff so I built upon it.\nI used DinCahill’s fork as a base for my version.\nI fixed whatever I found not working and added various tweaks enhancing functionality. I recompiled and repackaged everything using latest Qt (5.13.1) and latest platforms’ compilers. This on its own fixed some issues and added new features like support for dark mode in macOS. Then followed with more fixes and more features. Rclone Browser was great again:) and is getting better.\nCode signing certificates donations If you would like to donate towards code signing keys please feel free to do it. If I don’t raise required $500 I will give all money to some charity. Please see my note regarding it at the end of How to get it section. I will keep all updated with amount raised.\nRaised so far: 6.4 USD (1.3% of the required target)\n","description":"","tags":null,"title":"Rclone","uri":"/post/rclone/"},{"categories":null,"content":"4.17.1 / 2019-05-25 Revert “Improve error message for null/undefined to res.status” 4.17.0 / 2019-05-16 Add express.raw to parse bodies into Buffer Add express.text to parse bodies into string Improve error message for non-strings to res.sendFile Improve error message for null/undefined to res.status Support multiple hosts in X-Forwarded-Host deps: accepts@~1.3.7 deps: body-parser@1.19.0 Add encoding MIK ","description":"","tags":null,"title":"这是 第5 页","uri":"/post/5th/"},{"categories":null,"content":"#this is 4th post. – test, then the following line should be a picture. ","description":"","tags":null,"title":"4th","uri":"/post/4th/"},{"categories":null,"content":"Welcome to 3rd page.\n","description":"","tags":null,"title":"3rd","uri":"/post/3rd/"},{"categories":null,"content":"Hello World !! ","description":"","tags":null,"title":"Hello World","uri":"/post/hello-world/"},{"categories":null,"content":"Dillinger The Last Markdown Editor, Ever Dillinger is a cloud-enabled, mobile-ready, offline-storage compatible, AngularJS-powered HTML5 Markdown editor.\nType some Markdown on the left See HTML in the right ✨Magic ✨ Features Import a HTML file and watch it magically convert to Markdown Drag and drop images (requires your Dropbox account be linked) Import and save files from GitHub, Dropbox, Google Drive and One Drive Drag and drop markdown and HTML files into Dillinger Export documents as Markdown, HTML and PDF Markdown is a lightweight markup language based on the formatting conventions that people naturally use in email. As John Gruber writes on the Markdown site\nThe overriding design goal for Markdown’s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions.\nThis text you see here is *actually- written in Markdown! To get a feel for Markdown’s syntax, type some text into the left window and watch the results in the right.\nTech Dillinger uses a number of open source projects to work properly:\nAngularJS - HTML enhanced for web apps! Ace Editor - awesome web-based text editor markdown-it - Markdown parser done right. Fast and easy to extend. Twitter Bootstrap - great UI boilerplate for modern web apps node.js - evented I/O for the backend Express - fast node.js network app framework @tjholowaychuk Gulp - the streaming build system Breakdance - HTML to Markdown converter jQuery - duh And of course Dillinger itself is open source with a public repository on GitHub.\nInstallation Dillinger requires Node.js v10+ to run.\nInstall the dependencies and devDependencies and start the server.\n1 2 3 cd dillinger npm i node app For production environments…\n1 2 npm install --production NODE_ENV=production node app Plugins Dillinger is currently extended with the following plugins. Instructions on how to use them in your own application are linked below.\nPlugin README Dropbox plugins/dropbox/README.md GitHub plugins/github/README.md Google Drive plugins/googledrive/README.md OneDrive plugins/onedrive/README.md Medium plugins/medium/README.md Google Analytics plugins/googleanalytics/README.md Development Want to contribute? Great!\nDillinger uses Gulp + Webpack for fast developing. Make a change in your file and instantaneously see your updates!\nOpen your favorite Terminal and run these commands.\nFirst Tab:\n1 node app Second Tab:\n1 gulp watch (optional) Third:\n1 karma test Building for source For production release:\n1 gulp build --prod Generating pre-built zip archives for distribution:\n1 gulp build dist --prod Docker Dillinger is very easy to install and deploy in a Docker container.\nBy default, the Docker will expose port 8080, so change this within the Dockerfile if necessary. When ready, simply use the Dockerfile to build the image.\n1 2 cd dillinger docker build -t \u003cyouruser\u003e/dillinger:${package.json.version} . This will create the dillinger image and pull in the necessary dependencies. Be sure to swap out ${package.json.version} with the actual version of Dillinger.\nOnce done, run the Docker image and map the port to whatever you wish on your host. In this example, we simply map port 8000 of the host to port 8080 of the Docker (or whatever port was exposed in the Dockerfile):\n1 docker run -d -p 8000:8080 --restart=always --cap-add=SYS_ADMIN --name=dillinger \u003cyouruser\u003e/dillinger:${package.json.version} Note: --capt-add=SYS-ADMIN is required for PDF rendering.\nVerify the deployment by navigating to your server address in your preferred browser.\n1 127.0.0.1:8000 License MIT\nFree Software, Hell Yeah!\n","description":"","tags":null,"title":"2nd page","uri":"/post/2nd/"},{"categories":null,"content":"My 1st post!\n","description":"","tags":null,"title":"First","uri":"/post/first/"}]
